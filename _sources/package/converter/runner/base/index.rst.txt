:mod:`converter.runner.base`
============================

.. py:module:: converter.runner.base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   converter.runner.base.Converters
   converter.runner.base.BaseRunner
   converter.runner.base.BaseAsyncRunner



Functions
~~~~~~~~~

.. autoapisummary::

   converter.runner.base.build_converter


.. data:: RowType
   

   

.. py:class:: Converters

   Bases: :class:`typing.TypedDict`

   A simple typed namespace. At runtime it is equivalent to a plain dict.

   TypedDict creates a dictionary type that expects all of its
   instances to have a certain set of keys, where each key is
   associated with a value of a consistent type. This expectation
   is not checked at runtime but is only enforced by type checkers.
   Usage::

       class Point2D(TypedDict):
           x: int
           y: int
           label: str

       a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK
       b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check

       assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')

   The type info can be accessed via Point2D.__annotations__. TypedDict
   supports two additional equivalent forms::

       Point2D = TypedDict('Point2D', x=int, y=int, label=str)
       Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})

   By default, all keys must be present in a TypedDict. It is possible
   to override this by specifying totality.
   Usage::

       class point2D(TypedDict, total=False):
           x: int
           y: int

   This means that a point2D TypedDict can have any of the keys omitted.A type
   checker is only expected to support a literal False or True as the value of
   the total argument. True is the default, and makes all items defined in the
   class body be required.

   The class syntax is only supported in Python 3.6+, while two other
   syntax forms work for Python 2.7 and 3.2+

   .. attribute:: int
      :annotation: :Callable[[Any, bool, List], Union[int, None]]

      

   .. attribute:: float
      :annotation: :Callable[[Any, bool, List], Union[float, None]]

      

   .. attribute:: string
      :annotation: :Callable[[Any, bool, List], Union[str, None]]

      


.. function:: build_converter(t) -> Callable[[Any, bool, List], Any]


.. py:class:: BaseRunner(config: Config, **options)

   Bases: :class:`converter.runner.base._BaseRunner`

   Runs the transformations on the extracted data and writes
   it to the data loader

   :param config: The global config for the system

   .. method:: run(self, extractor: BaseConnector, mapping: BaseMapping, loader: BaseConnector)


      Runs the transformation process and swnds the data to the data loader

      :param extractor: The data connection to extract data from
      :param mapping: Mapping object describing the transformations to apply
      :param loader: The data connection to load data to


   .. method:: transform(self, extractor: BaseConnector, mapping: BaseMapping)
      :abstractmethod:


      Performs the transformation

      :param extractor: The data connection to extract data from
      :param mapping: Mapping object describing the transformations to apply

      :return: An iterable containing the transformed data



.. py:class:: BaseAsyncRunner(config: Config, **options)

   Bases: :class:`converter.runner.base._BaseRunner`

   Runs the transformations on the extracted data and writes it to the data
   loader. The connectors and transformation are all async objects allowing
   for async data providers such as websockets or polled apis to be used as
   a data connection.

   The connectors and transformations should be done in an eager way so that
   each row is processed and passed to the loader as it's received or cached
   for processing later. After each row if processed the next should be
   awaited so that new data can be extracted.

   :param config: The global config for the system

   .. method:: run(self, extractor: BaseConnector, mapping: BaseMapping, loader: BaseConnector)



   .. method:: transform(self, extractor: BaseConnector, mapping: BaseMapping)
      :abstractmethod:
      :async:


      Performs the transformation

      :param extractor: The data connection to extract data from
      :param mapping: Mapping object describing the transformations to apply

      :return: An iterable containing the transformed data



